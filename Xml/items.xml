<?xml version="1.0" encoding="utf-8"?>
<Items>

	<!-- the singular visible item of the mod -->
	<Item
		  identifier="suicidebooth"
		  scale="0.5" 
		  maxstacksize="1"
		  category="medical"
		  isshootable="true"
		  linkable="false"
		  disableitemusagewhenselected="true"
		  damagedbyexplosions="true"
		  explosiondamagemultiplier="0.2">
		<Body width="416" height="192" density="40" />
		
		<Deconstruct time="30">
		  <Item identifier="steel" />
		  <Item identifier="aluminium" />
		</Deconstruct>
		
		<Fabricate suitablefabricators="fabricator" requiredtime="42">
		  <RequiredSkill identifier="mechanical" level="50" />
		  <RequiredItem identifier="fpgacircuit" />
		  <RequiredItem identifier="plastic" amount="2" />
		  <RequiredItem identifier="steel" amount="3" />
		  <RequiredItem identifier="aluminium" amount="3" />
		</Fabricate>
		
		<InventoryIcon
			texture="%ModDir%/Images/suicidebooth.png" 
			sourcerect="0,0,166,374" origin="0.5,0.5" />
		
		<!-- Booth -->
		<sprite
			texture="%ModDir%/Images/suicidebooth.png" 
			sourcerect="0,0,166,374" origin="0.5,0.5" depth="0.51"
			premultiplyalpha="false"/>
		
		<!-- Container componenent to randomize results
			by checking spawning items -->
		<ItemContainer 
			canbeselected="false"
			capacity="1"
			maxstacksize="1" 
			hideitems="true" 
			hidehud="false">
			<Containable items="randomizer" />
		</ItemContainer>
		
		<!-- Controller for the main booth function -->
		<Controller
			allowingameediting="false"
			UserPos="0,-300"
			direction="Right"
			hidehud="false"
			canbeselected="true"
			selectkey="Select"
			drawuserbehind="true"
			msg="sb.ItemMsgEnterBooth"
			AllowSelectingWhenSelectedByBot="true"
			AllowWhenBroken="false">
			
			<limbposition limb="Head" position="50,-150" allowusinglimb="false" />
			<limbposition limb="Torso" position="100,-100" allowusinglimb="false" />
			<limbposition limb="Waist" position="50,-200" allowusinglimb="false" />
			<limbposition limb="RightFoot" position="100,-400" allowusinglimb="false" />
			<limbposition limb="LeftFoot" position="100,-400" allowusinglimb="false" />
			<limbposition limb="RightHand" position="100,-200" allowusinglimb="false" />
			<limbposition limb="LeftHand" position="100,-200" allowusinglimb="false" />
			<RequiredItem items="deepdivinglarge" type="Picked" requireempty="true" />

			<!-- Power requirement -->
			<LightComponent
				allowingameediting="false"
				LightColor="0,0,0,0"
				range="0"
				powerconsumption="500">
				<StatusEffect
					type="OnActive"
					target="This"
					tags="hasPower"
					duration="0.1"
					DisableInteract="true" setvalue="true"/>
			</LightComponent>
			
			<!-- spawn a random item
				to pick an outcome(statuseffect) 
				fucking hate that I have to resort to shit like this 
				xml is ass-->
				
				<!-- slow horrible item spawn -->
			<StatusEffect
				type="OnActive"
				target="This"
				conditionalComparison="and"
				CheckConditionalAlways="true"
				spawnItemRandomly="true">
				<Conditional HasStatusTag="hasPower" />
				<Conditional HasStatusTag="slowHorrible" />
				<Conditional HasStatusTag="hasStart" />
					
				<Spawnitem identifier="sb_r1" SpawnIfCantBeContained="false" spawnposition="ThisInventory" />
				<Spawnitem identifier="sb_r2" SpawnIfCantBeContained="false" spawnposition="ThisInventory" />
				<Spawnitem identifier="sb_r3" SpawnIfCantBeContained="false" spawnposition="ThisInventory" />
				<Spawnitem identifier="sb_r4" SpawnIfCantBeContained="false" spawnposition="ThisInventory" />
				<Spawnitem identifier="sb_r6" SpawnIfCantBeContained="false" spawnposition="ThisInventory" />
				<Spawnitem identifier="sb_r7" SpawnIfCantBeContained="false" spawnposition="ThisInventory" />
				<Spawnitem identifier="sb_r8" SpawnIfCantBeContained="false" spawnposition="ThisInventory" /> 
				<Spawnitem identifier="sb_r9" SpawnIfCantBeContained="false" spawnposition="ThisInventory" /> 	
				<Spawnitem identifier="sb_r12" SpawnIfCantBeContained="false" spawnposition="ThisInventory" />
			</StatusEffect>			
				
				<!-- fast painless item spawn -->
			<StatusEffect
				type="OnActive"
				target="This"
				conditionalComparison="and"
				CheckConditionalAlways="true"
				spawnItemRandomly="true">
				<Conditional HasStatusTag="hasPower" />
				<Conditional HasStatusTag="fastPainless" />
				<Conditional HasStatusTag="hasStart" />
					
				<Spawnitem identifier="sb_r5" SpawnIfCantBeContained="false" spawnposition="ThisInventory" />
				<Spawnitem identifier="sb_r10" SpawnIfCantBeContained="false" spawnposition="ThisInventory" />
				<Spawnitem identifier="sb_r11" SpawnIfCantBeContained="false" spawnposition="ThisInventory" /> 
			</StatusEffect>
			
			
				<!-- fast painless effects -->
			<!-- instant overdose -->
			<StatusEffect
				target="This,Character"
				disabledeltatime="true"
				conditionalComparison="And">
				<Conditional HasTag="sb_r5" TargetContainedItem="true"/>
				
				<Sound file="Content/Items/Medical/Syringe.ogg" range="500" />
				
				<Affliction identifier="sb_overdose" amount="1000" />
			</StatusEffect>	
				
			<!-- headshot -->
			<StatusEffect
				target="This,Character"
				disabledeltatime="true"
				conditionalComparison="And">
				<Conditional HasTag="sb_r10" TargetContainedItem="true"/>
				
				<Sound file="Content/Items/Weapons/Revolver1.ogg" selectionmode="random" range="500" />
				<Sound file="Content/Items/Weapons/Revolver2.ogg" range="500" />
				<Sound file="Content/Items/Weapons/Revolver3.ogg" range="500" />
				
				<Affliction identifier="sb_headshot" amount="1000" />
			</StatusEffect>	
				
			<!-- electrocute -->
			<StatusEffect
				target="This,Character"
				disabledeltatime="true"
				conditionalComparison="And">
				<Conditional HasTag="sb_r11" TargetContainedItem="true"/>
				
				<Sound file="Content/Items/Weapons/TaserHit1.ogg" selectionmode="random" range="500" />
				<Sound file="Content/Items/Weapons/TaserHit2.ogg" range="500" />
				
				<Affliction identifier="sb_electrocute" amount="1000" />
			</StatusEffect>	
				
				
				<!-- slow horrible effects -->
			<!-- decapitate -->
			<StatusEffect
				target="This,Character"
				targetlimbs="Head"
				CheckConditionalAlways="true">
				<Conditional HasTag="sb_r1" TargetContainedItem="true"/>
				
				<Sound file="Content/Sounds/Damage/Implode.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/Gore1.ogg" selectionmode="random" range="500" />
				<Sound file="Content/Sounds/Damage/Gore2.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/Gore3.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/Gore4.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/Gore5.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/Gore6.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/Gore7.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/Gore8.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/Gore9.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/Gore10.ogg" range="500" />
				
				<Affliction identifier="sb_decapitated" amount="100" />
			</StatusEffect>
			
			<!-- dismember -->
			<StatusEffect
				target="This,Character"
				disabledeltatime="true"
				CheckConditionalAlways="true">
				<Conditional HasTag="sb_r2" TargetContainedItem="true"/>
				
				<Sound file="Content/Sounds/Damage/Implode.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/Gore1.ogg" selectionmode="random" range="500" />
				<Sound file="Content/Sounds/Damage/Gore2.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/Gore3.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/Gore4.ogg" range="500" />
				
				<Affliction identifier="sb_dismembered" amount="100" />
			</StatusEffect>
			
			<!-- burn -->
			<StatusEffect
				target="This,Character"
				disabledeltatime="true"
				conditionalComparison="And">
				<Conditional HasTag="sb_r3" TargetContainedItem="true"/>
				
				<Affliction identifier="sb_burn" amount="100" />
				
				<Sound file="%ModDir%/Sounds/flame.ogg" range="500" />
			</StatusEffect>				
			
			<!-- acid burn -->
			<StatusEffect
				target="This,Character"
				disabledeltatime="true"
				conditionalComparison="And">
				<Conditional HasTag="sb_r4" TargetContainedItem="true"/>
				
				<Sound file="%ModDir%/Sounds/acid.ogg" range="500" />
				
				<Affliction identifier="sb_acidburn" amount="1000" />
			</StatusEffect>	
		
			<!-- very hard punch -->
			<StatusEffect
				target="This,Character"
				disabledeltatime="true"
				conditionalComparison="And">
				<Conditional HasTag="sb_r6" TargetContainedItem="true"/>
				
				<Sound file="Content/Sounds/Damage/ArmorBreak1.ogg" selectionmode="random" range="500" />
				<Sound file="Content/Sounds/Damage/ArmorBreak2.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/ArmorBreak3.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/ArmorBreak4.ogg" range="500" />
				
				<Affliction identifier="sb_punch" amount="1000" />
			</StatusEffect>
			
			<!-- lacerations bloodloss -->
			<StatusEffect
				target="This,Character"
				disabledeltatime="true"
				conditionalComparison="And">
				<Conditional HasTag="sb_r7" TargetContainedItem="true"/>
				
				<Sound file="Content/Sounds/Damage/Ricochet1.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/Ricochet2.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/Ricochet3.ogg" range="500" />
				<Sound file="Content/Sounds/Damage/Ricochet4.ogg" range="500" />
				
				<Affliction identifier="sb_laceration" amount="1000" />
			</StatusEffect>		
			
			<!-- scoop organs -->
			<StatusEffect
				target="This,Character"
				targetlimbs="Torso"
				disabledeltatime="true"
				conditionalComparison="And">
				<Conditional HasTag="sb_r8" TargetContainedItem="true"/>
				
				<Sound file="%ModDir%/Sounds/scoop.ogg" range="500" />
				
				<Affliction identifier="sb_scoop" amount="1000" />
			</StatusEffect>	
			
			<!-- claw skin -->
			<StatusEffect
				target="This,Character"
				disabledeltatime="true"
				conditionalComparison="And">
				<Conditional HasTag="sb_r9" TargetContainedItem="true"/>

				<Sound file="Content/Characters/Charybdis/Bite1.ogg" selectionmode="random" range="500" />
				<Sound file="Content/Characters/Charybdis/Bite2.ogg" range="500" />
				<Sound file="Content/Characters/Charybdis/Bite3.ogg" range="500" />

				<Affliction identifier="sb_claw" amount="1000" />
			</StatusEffect>		
		
			<!-- lmao -->
			<StatusEffect
				target="This,Character"
				targetlimbs="Head"
				disabledeltatime="true"
				conditionalComparison="And">
				<Conditional HasTag="sb_r12" TargetContainedItem="true"/>
				
				<Sound file="Content/Items/Medical/Syringe.ogg" range="500" />
				
				<Affliction identifier="sb_worsethandeath" amount="1000" />
				<Affliction identifier="sb_scream" amount="1000" />
				<Affliction identifier="stun" amount="3" />
			</StatusEffect>
			
			<!-- choice gui -->
			<CustomInterface
				canbeselected="true" 
				selectkey="Select"
				drawhudwhenequipped="true" 
				allowuioverlap="true">
				<GuiFrame 
					relativesize="0.16,0.15" 
					anchor="CenterRight"
					style="ItemUI" />
					<TickBox 
						text="sb.slowhorrible">
						<StatusEffect
							type="OnUse"
							targettype="This" 
							tags="slowHorrible"
							duration="0.1"/>
						<StatusEffect
							type="OnSecondaryUse" 
							targettype="This" />
					</TickBox>
					<TickBox 
						text="sb.fastpainless">
						<StatusEffect
							type="OnUse" 
							targettype="This" 
							tags="fastPainless"
							duration="0.1"/>
						<StatusEffect
							type="OnSecondaryUse" 
							targettype="This" />
					</TickBox>
					<Button 
						text="sb.starttext" 
						connection="signal_out1">
						<StatusEffect
							type="OnUse" 
							target="This" 
							stackable="false" 	
							tags="hasStart"
							duration="0.1"/>						
							
						<StatusEffect
							type="OnUse" 
							target="This" 
							stackable="false">
							<Conditional HasStatusTag="neq hasPower" />
							<Sound file="Content/Items/Button/Button.ogg" range="500" />
						</StatusEffect>
					</Button>
			</CustomInterface>
		</Controller>
		
		<!-- Repair/damage component -->
		<Repairable
			selectkey="Action"
			header="mechanicalrepairsheader"
			deteriorationspeed="0.10"
			mindeteriorationdelay="60"
			maxdeteriorationdelay="120"
			RepairThreshold="80"
			fixDurationHighSkill="7"
			fixDurationLowSkill="20"
			msg="ItemMsgRepairWrench"
			hudpriority="10">
			<GuiFrame relativesize="0.2,0.16" minsize="400,180" maxsize="480,280" anchor="Center" relativeoffset="0.1,0.27" style="ItemUI"/>
			<RequiredSkill identifier="mechanical" level="35" />
			<RequiredItem items="wrench" type="Equipped" />
			<StatusEffect type="OnFailure" target="Character" targetlimbs="LeftHand,RightHand" AllowWhenBroken="true">
			<Sound file="Content/Items/MechanicalRepairFail.ogg" range="1000" />
			<Affliction identifier="lacerations" strength="12" />
			<Affliction identifier="stun" strength="2" />
		  </StatusEffect>
		</Repairable>
		
		<!-- Connection panel for power connection 
			and status output -->
		<ConnectionPanel 
			selectkey="Action" 
			canbeselected="true" 
			msg="ItemMsgRewireScrewdriver" 
			hudpriority="10">
		  <GuiFrame relativesize="0.2,0.32" minsize="400,350" maxsize="480,420" anchor="Center" style="ConnectionPanel" />
		  <RequiredItem items="screwdriver" type="Equipped" />
		  <input name="power_in" displayname="connection.powerin" />
		  <output name="condition_out" displayname="connection.conditionout" />
		  <output name="state_out" displayname="connection.stateout" fallbackdisplayname="connection.signalout" />
		</ConnectionPanel>

		<!-- Holdable component for manual placement -->
		<Holdable 
			selectkey="Action"
			pickkey="Use"
			slots="RightHand+LeftHand" 
			PickingTime="5"
			msg="sb.itemmsgdetachcrowbar"
			aimpos="0,0"
			handle1="0,0"
			attachable="true"
			aimable="true">
			<RequiredItem items="crowbar" type="Equipped" />
		</Holdable>
	</Item>


		<!-- Mechanic Items -->
		
		<!-- [this section only exists to randomize
		the outcome of status effects by
		spawning in items and then checking for them
		since apperantly devs didn't feel like adding
		randomization values to xml apart from randomized item spawns, 
		just the thing I deserve for strafing away from Lua] -->
		
	<!-- here goes the fruits of xml retardation -->
	<Item
		identifier="sb_r1"
		noninteractable="true"
		hideinmenus="true"
		tags="sb_r1,randomizer">
		<InventoryIcon texture="Content/Items/InventoryIconAtlas.png" sourcerect="0,0,1,1" origin="0.5,0.5" />
		<Sprite texture="Content/Items/Medical/Medicines.png" sourcerect="0,0,1,1" depth="0.6" origin="0.5,0.5" />
		<ItemComponent>
			<StatusEffect 
				type="Always" 
				target="This" 
				disabledeltatime="true"
				delay="1">
				<Remove />
			</StatusEffect>
		</ItemComponent>
	</Item>	

	<Item
		identifier="sb_r2"
		noninteractable="true"
		hideinmenus="true"
		tags="sb_r2,randomizer">
		<InventoryIcon texture="Content/Items/InventoryIconAtlas.png" sourcerect="0,0,1,1" origin="0.5,0.5" />
		<Sprite texture="Content/Items/Medical/Medicines.png" sourcerect="0,0,1,1" depth="0.6" origin="0.5,0.5" />
		<ItemComponent>
			<StatusEffect 
				type="Always" 
				target="This" 
				disabledeltatime="true"
				delay="1">
				<Remove />
			</StatusEffect>
		</ItemComponent>
	</Item>	
	
	<Item
		identifier="sb_r3"
		noninteractable="true"
		hideinmenus="true"
		tags="sb_r3,randomizer">
		<InventoryIcon texture="Content/Items/InventoryIconAtlas.png" sourcerect="0,0,1,1" origin="0.5,0.5" />
		<Sprite texture="Content/Items/Medical/Medicines.png" sourcerect="0,0,1,1" depth="0.6" origin="0.5,0.5" />
		<ItemComponent>
			<StatusEffect 
				type="Always" 
				target="This" 
				disabledeltatime="true"
				delay="1">
				<Remove />
			</StatusEffect>
		</ItemComponent>
	</Item>	
	
	<Item
		identifier="sb_r4"
		noninteractable="true"
		hideinmenus="true"
		tags="sb_r4,randomizer">
		<InventoryIcon texture="Content/Items/InventoryIconAtlas.png" sourcerect="0,0,1,1" origin="0.5,0.5" />
		<Sprite texture="Content/Items/Medical/Medicines.png" sourcerect="0,0,1,1" depth="0.6" origin="0.5,0.5" />
		<ItemComponent>
			<StatusEffect 
				type="Always" 
				target="This" 
				disabledeltatime="true"
				delay="1">
				<Remove />
			</StatusEffect>
		</ItemComponent>
	</Item>	
	
	<Item
		identifier="sb_r5"
		noninteractable="true"
		hideinmenus="true"
		tags="sb_r5,randomizer">
		<InventoryIcon texture="Content/Items/InventoryIconAtlas.png" sourcerect="0,0,1,1" origin="0.5,0.5" />
		<Sprite texture="Content/Items/Medical/Medicines.png" sourcerect="0,0,1,1" depth="0.6" origin="0.5,0.5" />
		<ItemComponent>
			<StatusEffect 
				type="Always" 
				target="This" 
				disabledeltatime="true"
				delay="1">
				<Remove />
			</StatusEffect>
		</ItemComponent>
	</Item>	
	
	<Item
		identifier="sb_r6"
		noninteractable="true"
		hideinmenus="true"
		tags="sb_r6,randomizer">
		<InventoryIcon texture="Content/Items/InventoryIconAtlas.png" sourcerect="0,0,1,1" origin="0.5,0.5" />
		<Sprite texture="Content/Items/Medical/Medicines.png" sourcerect="0,0,1,1" depth="0.6" origin="0.5,0.5" />
		<ItemComponent>
			<StatusEffect 
				type="Always" 
				target="This" 
				disabledeltatime="true"
				delay="1">
				<Remove />
			</StatusEffect>
		</ItemComponent>
	</Item>	
	
	<Item
		identifier="sb_r7"
		noninteractable="true"
		hideinmenus="true"
		tags="sb_r7,randomizer">
		<InventoryIcon texture="Content/Items/InventoryIconAtlas.png" sourcerect="0,0,1,1" origin="0.5,0.5" />
		<Sprite texture="Content/Items/Medical/Medicines.png" sourcerect="0,0,1,1" depth="0.6" origin="0.5,0.5" />
		<ItemComponent>
			<StatusEffect 
				type="Always" 
				target="This" 
				disabledeltatime="true"
				delay="1">
				<Remove />
			</StatusEffect>
		</ItemComponent>
	</Item>	
	
	<Item
		identifier="sb_r8"
		noninteractable="true"
		hideinmenus="true"
		tags="sb_r8,randomizer">
		<InventoryIcon texture="Content/Items/InventoryIconAtlas.png" sourcerect="0,0,1,1" origin="0.5,0.5" />
		<Sprite texture="Content/Items/Medical/Medicines.png" sourcerect="0,0,1,1" depth="0.6" origin="0.5,0.5" />
		<ItemComponent>
			<StatusEffect 
				type="Always" 
				target="This" 
				disabledeltatime="true"
				delay="1">
				<Remove />
			</StatusEffect>
		</ItemComponent>
	</Item>	
	
	<Item
		identifier="sb_r9"
		noninteractable="true"
		hideinmenus="true"
		tags="sb_r9,randomizer">
		<InventoryIcon texture="Content/Items/InventoryIconAtlas.png" sourcerect="0,0,1,1" origin="0.5,0.5" />
		<Sprite texture="Content/Items/Medical/Medicines.png" sourcerect="0,0,1,1" depth="0.6" origin="0.5,0.5" />
		<ItemComponent>
			<StatusEffect 
				type="Always" 
				target="This" 
				disabledeltatime="true"
				delay="1">
				<Remove />
			</StatusEffect>
		</ItemComponent>
	</Item>
	
	<Item
		identifier="sb_r10"
		noninteractable="true"
		hideinmenus="true"
		tags="sb_r10,randomizer">
		<InventoryIcon texture="Content/Items/InventoryIconAtlas.png" sourcerect="0,0,1,1" origin="0.5,0.5" />
		<Sprite texture="Content/Items/Medical/Medicines.png" sourcerect="0,0,1,1" depth="0.6" origin="0.5,0.5" />
		<ItemComponent>
			<StatusEffect 
				type="Always" 
				target="This" 
				disabledeltatime="true"
				delay="1">
				<Remove />
			</StatusEffect>
		</ItemComponent>
	</Item>	
	
	<Item
		identifier="sb_r11"
		noninteractable="true"
		hideinmenus="true"
		tags="sb_r11,randomizer">
		<InventoryIcon texture="Content/Items/InventoryIconAtlas.png" sourcerect="0,0,1,1" origin="0.5,0.5" />
		<Sprite texture="Content/Items/Medical/Medicines.png" sourcerect="0,0,1,1" depth="0.6" origin="0.5,0.5" />
		<ItemComponent>
			<StatusEffect 
				type="Always" 
				target="This" 
				disabledeltatime="true"
				delay="1">
				<Remove />
			</StatusEffect>
		</ItemComponent>
	</Item>	
	
	<Item
		identifier="sb_r12"
		noninteractable="true"
		hideinmenus="true"
		tags="sb_r12,randomizer">
		<InventoryIcon texture="Content/Items/InventoryIconAtlas.png" sourcerect="0,0,1,1" origin="0.5,0.5" />
		<Sprite texture="Content/Items/Medical/Medicines.png" sourcerect="0,0,1,1" depth="0.6" origin="0.5,0.5" />
		<ItemComponent>
			<StatusEffect 
				type="Always" 
				target="This" 
				disabledeltatime="true"
				delay="1">
				<Remove />
			</StatusEffect>
		</ItemComponent>
	</Item>
	<!-- end of retardation -->


</Items>